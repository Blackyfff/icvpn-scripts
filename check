#!/usr/bin/env python

import os
import sys
import yaml
from ipaddress import ip_address, ip_network
from collections import defaultdict
from textwrap import dedent
from optparse import OptionParser
from socket import AF_INET, AF_INET6, inet_pton
from formatter import Formatter

def error(*arg):
    print(*arg, file=sys.stderr)

def check_dupe(name, v, d, community):
    errcnt = 0

    if v in d:
        errcnt += 1
        error("Duplicate %s (%s):" % (name, v), d[v], community)

    if errcnt == 0:
        d[v] = community

    return errcnt

def check_net(family, net, nets, community):
    errcnt = 0

    for other in nets:
        if other.overlaps(net):
            errcnt += 1
            error("%s Network overlap: %s (%s), %s (%s)" % (family, community, net, nets[other], other))

    if errcnt == 0:
        nets[net] = community

    return errcnt

def do_checks(srcdir):
    """
    Check files for sanity.
    """

    asns = dict()
    bgp_gw = dict()
    bgp_gw_ip = dict()
    v6_nets = dict()
    v4_nets = dict()
    errcnt = 0

    for fname in sorted(list(set(os.listdir(srcdir)))):
        if fname.startswith("."):
            continue

        if fname.startswith("README"):
            continue

        fpath = os.path.join(srcdir, fname)
        if os.path.isfile(fpath):
            with open(fpath) as f:
                data = yaml.load(f)
                community = fname
                print("Checking", community)

                if 'asn' in data:
                    errcnt += check_dupe("ASN", data['asn'], asns, community)

                if 'bgp' in data:
                    for bgp in data['bgp']:
                        errcnt += check_dupe("BGP peer name", bgp, bgp_gw, community)
                        
                        for ipclass in data['bgp'][bgp]:
                            ip = ip_address(data['bgp'][bgp][ipclass])
                            errcnt += check_dupe("BGP IP", ip, bgp_gw_ip, community)

                if 'networks' in data:
                    if 'ipv6' in data['networks']:
                        for net in data['networks']['ipv6']:
                            net = ip_network(net)
                            errcnt += check_net("IPv6", net, v6_nets, community)

                    if 'ipv4' in data['networks']:
                        for net in data['networks']['ipv4']:
                            net = ip_network(net)
                            errcnt += check_net("IPv4", net, v4_nets, community)

    print("%d error(s)" % errcnt)

    return 0 if errcnt == 0 else 1

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-s", "--sourcedir", dest="src",
        help="Use files in DIR as input files. Default: data/", metavar="DIR",
        default="data")

    (options, args) = parser.parse_args()

    ret = do_checks(options.src)
    
    sys.exit(ret)
