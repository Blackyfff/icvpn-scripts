#!/usr/bin/env python

import sys
import ipaddress
import math
from optparse import OptionParser
from math import floor
from filereader import get_communities_data


ICVPN_NETWORKS = {
    "IPv4": ipaddress.IPv4Network("10.207.0.0/16"),
    "IPv6": ipaddress.IPv6Network("fec0::a:cf:0:0/96"),
}

ANSI_COLOR_ERR = "\x1b[31m"
ANSI_COLOR_WARN = "\x1b[33m"
ANSI_COLOR_RESET = "\x1b[0m"


def error(*arg):
    print(ANSI_COLOR_ERR, *arg, file=sys.stderr,
          end='%s\n' % ANSI_COLOR_RESET)


def warn(*arg):
    print(ANSI_COLOR_WARN, *arg, file=sys.stderr,
          end='%s\n' % ANSI_COLOR_RESET)


def ip_family_address(family, address):
    obj = getattr(ipaddress, family + "Address")
    return obj(address)


def ip_family_network(family, network):
    obj = getattr(ipaddress, family + "Network")
    return obj(network)


def check_dupe(name, v, d, community):
    if v in d:
        error("Duplicate %s (%s):" % (name, v), d[v], community)
        return 1
    else:
        d[v] = community
        return 0


def check_net(family, net, nets, community):
    errcnt = 0

    try:
        net = ip_family_network(family, net)
    except ValueError:
        errcnt += 1
        error("Not an %s network: %s (%s)" % (family, net, community))
    else:
        for other in nets:
            if other.overlaps(net):
                errcnt += 1
                error("%s Network overlap: %s (%s), %s (%s)" %
                      (family, community, net, nets[other], other))

        if errcnt == 0:
            nets[net] = community

    return errcnt

def check_rdns(data):
    errcnt = 0

    allowed_domains = []

    # find allowed rdns-domain-names
    if 'networks' in data:
        if 'IPv6'.lower() in data['networks']:
            for net_str in data['networks']['IPv6'.lower()]:
                try:
                    net = ip_family_network('IPv6', net_str)
                    net_length = math.floor(net.prefixlen / 4) #4 bits per character
                    # by rounding down instead of correcly handling partially used characters
                    # we generate false-passes but no false-warnings for prefixlength % 4 != 0

                    net_dns = net \
                        .network_address \
                        .exploded \
                        .replace(":", "") \
                        [:net_length]
                    net_dns = '.'.join(reversed(net_dns))
                    net_dns = net_dns + '.ip6.arpa'

                    allowed_domains.append(net_dns)
                except ValueError:
                    errcnt = errcnt + 0 #dummy statement to supress error about empty except-block

        if 'IPv4'.lower() in data['networks']:
            for net_str in data['networks']['IPv4'.lower()]:
                try:
                    net = ip_family_network('IPv4', net_str)
                    net_length = math.floor(net.prefixlen / 8) #8 bits per block
                    # by rounding down instead of correcly handling partially used blocks
                    # we generate false-passes but no false-warnings for prefixlength % 8 != 0

                    net_dns = net \
                        .network_address \
                        .exploded \
                        .split(".") \
                        [:net_length]

                    net_dns = '.'.join(reversed(net_dns))
                    net_dns = net_dns + '.in-addr.arpa'

                    allowed_domains.append(net_dns)
                except ValueError:
                    errcnt = errcnt + 0 #dummy statement to supress error about empty except-block

    if 'domains' in data:
        for domain in data['domains']:
            if domain.endswith('.ip6.arpa') or domain.endswith('.in-addr.arpa'):
                failed = True
                for net_dns in allowed_domains:
                    if domain.endswith(net_dns):
                        failed = False

                if failed:
                    errcnt += 1
                    error("Illegal RDNS-Domain: found no matching net for %s (found nets: %s)" % (domain, allowed_domains))

    return errcnt

def do_checks(srcdir):
    """
    Check files for sanity.
    """

    asns = dict()
    bgp_gw = dict()
    bgp_gw_ip = dict()
    networks = {
        'IPv4': {ICVPN_NETWORKS['IPv4']: 'transfer'},
        'IPv6': {ICVPN_NETWORKS['IPv6']: 'transfer'},
    }
    warncnt = 0
    errcnt = 0

    def filereader_error_handler(community):
        global errcnt
        error("Invalid YAML: %s" % community)
        errcnt += 1

    for community, data in get_communities_data(srcdir, [],
                                                filereader_error_handler):
        print("Checking", community)

        if 'asn' in data:
            errcnt += check_dupe("ASN", data['asn'], asns, community)

        for bgp in data.get('bgp', []):
            errcnt += check_dupe("BGP peer name", bgp, bgp_gw, community)

            lastbytes = set()

            for ipclass in data['bgp'][bgp]:
                upipclass = ipclass[:2].upper() + ipclass[2:]
                try:
                    ip = ip_family_address(upipclass,
                                           data['bgp'][bgp][ipclass])
                except ValueError:
                    errcnt += 1
                    error("Not an %s BGP address: %s (%s)" %
                          (upipclass, data['bgp'][bgp][ipclass], community))
                    continue

                errcnt += check_dupe("BGP IP", ip, bgp_gw_ip, community)
                try:
                    network = ICVPN_NETWORKS[upipclass]
                except KeyError:
                    errcnt += 1
                    error("Unknown BGP protocol class: %s (%s)" %
                          (upipclass, community))
                    continue

                if ip not in network:
                    errcnt += 1
                    error("%s BGP address in wrong subnet: %s (%s)" %
                          (upipclass, data['bgp'][bgp][ipclass], community))

                # we want that the last half of the host part of the
                # address spaces contains the same numeric value for all
                # protocol version
                # i.e. last 8 bits of IPv4 = last 16 bits of IPv6
                # i.e. IPv6 has to be padded with 8 zeroes
                matchbits = floor((ip.max_prefixlen - network.prefixlen) / 2)
                lastbytes.add(int(ip) % (1 << matchbits))

            if len(lastbytes) != 1:
                warncnt += 1
                warn("Last part of BGP addresses differs: " +
                     "%s (%s)" % (lastbytes, community))

        if 'networks' in data:
            for family in ('IPv4', 'IPv6'):
                if family.lower() in data['networks']:
                    for net in data['networks'][family.lower()]:
                        errcnt += check_net(family,
                                            net,
                                            networks[family],
                                            community)

        if 'domains' in data:
            errcnt += check_rdns(data)

    print(ANSI_COLOR_WARN, "%d warning(s)" % warncnt, ANSI_COLOR_RESET)
    print(ANSI_COLOR_ERR, "%d error(s)" % errcnt, ANSI_COLOR_RESET)

    return 0 if errcnt == 0 else 1

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="Use files in DIR as input files. Default: ../icvpn-meta/",
                      metavar="DIR",
                      default="../icvpn-meta/")

    (options, args) = parser.parse_args()

    ret = do_checks(options.src)

    sys.exit(ret)
