#!/usr/bin/env python

import os
import yaml
from collections import defaultdict
from textwrap import dedent
from optparse import OptionParser
from socket import AF_INET, AF_INET6, inet_pton

class Formatter(object):
    """
    Abstract class to define the interface for formatters.
    """

    def __init__(self):
        """
        Initialize formatter, maybe generate a preamble for the config
        """
        self.config = []
        self.add_comment(dedent(
            """
            This file is automatically generated.
            """
        ))

    def add_comment(self, comment):
        """
        Add a comment to the config. Default is prefixed with #
        """
        self.config.append("# " + "\n# ".join(comment.split("\n")))

    def add_data(self, domains, servers):
        """
        Add config directives so that every domain in domains is forwarded to
        every server in servers.
        """
        raise NotImplementedError()

    def finalize(self):
        """
        Finalize configuration and return it
        """
        return "\n".join(self.config)

class BirdFormatter(Formatter):
    "Formatter for bind9 using type forward"
    def add_data(self, asn, name, template, peer):
      self.config.append(dedent("""
        protocol bgp %s from %s {
            neighbor %s as %s;
        }
        """ % (name, template, peer, asn)))

def create_config(srcdir, exclude, prefix, defaulttemplate, templates, bird4):
    """
    Generates a configuration using all files in srcdir (non-recursively)
    excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic results.
    """
    formatter = BirdFormatter()
    template = defaultdict(lambda: defaulttemplate)
    template.update(dict(map(lambda s: s.split(":"), templates)))

    family = "ipv4" if bird4 else "ipv6"

    for fname in sorted(list(set(os.listdir(srcdir)) - set(exclude))):
        fpath = os.path.join(srcdir, fname)
        if os.path.isfile(fpath):
            with open(fpath) as f:
                data = yaml.load(f)
                community = fname

                if not 'bgp' in data:
                    continue

                for host in sorted(data['bgp'].keys()):
                    d = data['bgp'][host]
                    if not family in d:
                        continue

                    peer = d[family]

                    formatter.add_data(data['asn'], prefix + host,
                            template[community], peer)

    print(formatter.finalize())

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-4", dest="bird4", action="store_true",
        help="Generate bird4 config instead of bird6", default=False)
    parser.add_option("-s", "--sourcedir", dest="src",
        help="Use files in DIR as input files. Default: data/", metavar="DIR",
        default="data")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
        help="Exclude the comma-separated list of COMMUNITIES", metavar="COMMUNITIES",
        default=[])
    parser.add_option("-p", "--prefix", dest="prefix",
        help="Prefix, e.g. bgp_icvpn_", metavar="PREFIX",
        default="")
    parser.add_option("-d", "--default", dest="defaulttemplate",
        help="TEMPLATE", metavar="TEMPLATE",
        default=None)
    parser.add_option("-t", "--template", dest="templates", action="append",
        help="COMMUNITY:TEMPLATE", metavar="TEMPLATE",
        default=[])

    (options, args) = parser.parse_args()

    create_config(options.src, set(options.exclude), options.prefix,
            options.defaulttemplate, options.templates,
            options.bird4)
