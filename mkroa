#!/usr/bin/env python

from textwrap import dedent
from optparse import OptionParser
from formatter import Formatter
from filereader import get_communities_data


class BirdRoaFormatter(Formatter):
    "Formatter for roa table in bird format"
    def __init__(self):
        self.config = []
        self.data   = []
        self.add_comment(dedent(
            """
            This file is automatically generated.
            You need to add the surrounding roa table statement yourself.
            So Include it via:
              roa table icvpn { include "roa.con?" }
            """
        ))

    def add_data(self, asn, name, network, max_prefixlen):
        self.data.append((network, max_prefixlen, asn, name))

    def finalize(self):
        maxlen_net = str(max(map(lambda x: len(x[0]), self.data)))
        maxlen_as  = str(max(map(lambda x: len(str(x[2])), self.data)))

        for entry in self.data:
            self.config.append(("    roa %-" + maxlen_net + "s max %3s as %+"
                               + maxlen_as + "s; # %s")
                               % entry)

        return "\n".join(self.config)


def create_config(srcdir, exclude, family,
                  fmtclass, default_max_prefixlen):
    """
    Generates a configuration using all files in srcdir
    (non-recursively) excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic
    results.
    """
    formatter = fmtclass()

    for community, data in get_communities_data(srcdir, exclude):
        try:
            networks = data["networks"][family]
            asn      = data["asn"]
        except (TypeError, KeyError):
            continue

        for network in sorted(networks):
            prefixlen = int(network.split("/")[1])
            if prefixlen > default_max_prefixlen:
                max_prefixlen = prefixlen
            else:
                max_prefixlen = default_max_prefixlen
            formatter.add_data(asn, community, network, max_prefixlen)

    print(formatter.finalize())


if __name__ == "__main__":
    formatters = {
        "bird": BirdRoaFormatter,
    }

    parser = OptionParser()
    parser.add_option("-f", "--format", dest="fmt",
                      help="""Create config in format FMT.
                              Possible values: %s.""" %
                           ", ".join(formatters.keys()),
                      metavar="FMT",
                      choices=list(formatters.keys()),
                      default="bird")
    parser.add_option("-4", dest="family", action="store_const", const="ipv4",
                      help="Generate IPv4 config")
    parser.add_option("-6", dest="family", action="store_const", const="ipv6",
                      help="Generate IPv6 config")
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="""Use files in DIR as input files.
                              Default: ../icvpn-meta/""", metavar="DIR",
                      default="../icvpn-meta/")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
                      help="Exclude the comma-separated list of COMMUNITIES",
                      metavar="COMMUNITIES",
                      default=[])
    parser.add_option("-m", "--max", dest="default_max_prefixlen", default=0,
                      type=int,help="max prefix length to accept")
    parser.set_defaults(family="ipv6")
    
    (options, args) = parser.parse_args()

    create_config(options.src, set(options.exclude),
                  options.family, formatters[options.fmt],
                  options.default_max_prefixlen)
