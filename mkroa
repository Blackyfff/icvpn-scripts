#!/usr/bin/env python

from collections import defaultdict
from textwrap import dedent
from optparse import OptionParser
from socket import AF_INET, AF_INET6, inet_pton
from formatter import Formatter
from filereader import get_communities_data


class BirdRoaFormatter(Formatter):
    "Formatter for bind9 using type forward"
    def __init__(self):
        self.config = []
        self.add_comment(dedent(
            """
            This file is automatically generated.
            """
        ))
        self.config.append("roa table icvpnroa {")

    def add_data(self, asn, network, max):
        self.config.append("""    roa %s max %s as %s;"""
                           % (network, max, asn))

    def finalize(self):
        self.config.append('}')
        return "\n".join(self.config)

def create_config(srcdir, exclude, family,
                  fmtclass, max):
    """
    Generates a configuration using all files in srcdir
    (non-recursively) excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic
    results.
    """
    formatter = fmtclass()
    template = defaultdict()

    for community, data in get_communities_data(srcdir, exclude):
        try:
            networks = data["networks"][family]
            asn      = data["asn"]
        except (TypeError, KeyError):
            continue

        for network in sorted(networks):
            length = network.split("/")[1]
            if length > max:
                network_max = length
            else:
                network_max = max
            formatter.add_data(asn, network, network_max)

    print(formatter.finalize())


if __name__ == "__main__":
    formatters = {
        "bird": BirdRoaFormatter,
    }

    parser = OptionParser()
    parser.add_option("-f", "--format", dest="fmt",
                      help="""Create config in format FMT.
                              Possible values: %s.""" %
                           ", ".join(formatters.keys()),
                      metavar="FMT",
                      choices=list(formatters.keys()),
                      default="bird")
    parser.add_option("-4", dest="family", action="store_const", const="ipv4",
                      help="Generate IPv4 config")
    parser.add_option("-6", dest="family", action="store_const", const="ipv6",
                      help="Generate IPv6 config")
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="""Use files in DIR as input files.
                              Default: data/""", metavar="DIR",
                      default="data")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
                      help="Exclude the comma-separated list of COMMUNITIES",
                      metavar="COMMUNITIES",
                      default=[])
    parser.add_option("-m", "--max", dest="max")
    parser.set_defaults(family="ipv6")
    
    (options, args) = parser.parse_args()

    create_config(options.src, set(options.exclude),
                  options.family, formatters[options.fmt], options.max)
