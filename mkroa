#!/usr/bin/env python

from textwrap import dedent
from optparse import OptionParser
from formatter import Formatter
from filereader import get_communities_data


class BirdRoaFormatter(Formatter):
    """
    Formatter for roa table in bird format
    """
    def __init__(self):
        self.config = []
        self.data = []
        self.add_comment(dedent(
            """
            This file is automatically generated.
            You need to add the surrounding roa table statement yourself.
            So Include it via:
              roa table icvpn { include "roa.con?" }
            """
        ))

    def add_data(self, asn, name, network, max_prefixlen):
        self.data.append((network, max_prefixlen, asn, name))

    def finalize(self):
        maxlen_net = str(max(map(lambda x: len(x[0]), self.data)))
        maxlen_asn = str(max(map(lambda x: len(str(x[2])), self.data)))

        for entry in self.data:
            self.config.append("roa {subnet:<{len_net}} max {max_prefix_len:>3} as {asn:>{len_asn}}; # {community}".format(
                subnet=entry[0], max_prefix_len=entry[1], asn=entry[2], community=entry[3],
                len_net=maxlen_net, len_asn=maxlen_asn
            ))

        return "\n".join(self.config)


def add_roa(formatter, asn, community, network, prefixlen, default_max_prefixlen):
    formatter.add_data(asn, community, network, max(prefixlen, default_max_prefixlen))

def create_config(srcdir, exclude, family, fmtclass, default_max_prefixlen):
    """
    Generates a configuration using all files in srcdir
    (non-recursively) excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic
    results.
    """
    formatter = fmtclass()

    if default_max_prefixlen == None:
        if family == 'ipv6':
            default_max_prefixlen = 64
        elif family == 'ipv4':
            default_max_prefixlen = 24

    for community, data in get_communities_data(srcdir, exclude):
        try:
            networks = data["networks"][family]
            asn = data["asn"]
            delegate = data.get('delegate', {})
        except (TypeError, KeyError):
            continue

        for network in sorted(networks):
            prefixlen = int(network.split("/")[1])
            add_roa(formatter, asn, community, network, prefixlen, default_max_prefixlen)

        for delegate_asn, delegate_networks in delegate.items():
            for delegate_network in delegate_networks:
                # not very beautiful, but everything more proper requires including a library
                if family == 'ipv6' and '.' in delegate_network:
                    continue
                if family == 'ipv4' and ':' in delegate_network:
                    continue
                prefixlen = int(delegate_network.split("/")[1])
                add_roa(formatter, delegate_asn, community, delegate_network, prefixlen, default_max_prefixlen)

    print(formatter.finalize())


if __name__ == "__main__":
    formatters = {
        "bird": BirdRoaFormatter,
    }

    parser = OptionParser()
    parser.add_option("-f", "--format", dest="fmt",
                      help="""Create config in format FMT.
                              Possible values: %s.""" %
                           ", ".join(formatters.keys()),
                      metavar="FMT",
                      choices=list(formatters.keys()),
                      default="bird")
    parser.add_option("-4", dest="family", action="store_const", const="ipv4",
                      help="Generate IPv4 config")
    parser.add_option("-6", dest="family", action="store_const", const="ipv6",
                      help="Generate IPv6 config")
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="""Use files in DIR as input files.
                              Default: ../icvpn-meta/""", metavar="DIR",
                      default="../icvpn-meta/")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
                      help="Exclude the comma-separated list of COMMUNITIES",
                      metavar="COMMUNITIES",
                      default=[])
    parser.add_option("-m", "--max", dest="default_max_prefixlen", default=None,
                      type=int, help="max prefix length to accept")
    parser.set_defaults(family="ipv6")

    (options, args) = parser.parse_args()

    create_config(options.src, set(options.exclude),
                  options.family, formatters[options.fmt],
                  options.default_max_prefixlen)
